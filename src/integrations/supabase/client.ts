
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://xxcgpoksxyqbxheonash.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh4Y2dwb2tzeHlxYnhoZW9uYXNoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ3MTE3OTEsImV4cCI6MjA2MDI4Nzc5MX0.3GBhUMFkurFbVnXYXJO5mY9v1e0Cq-JnQvgjFSNsQSM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a custom type that includes tables not in the auto-generated types
type CustomSchema = {
  Tables: {
    activity_logs: {
      Row: {
        id: string;
        date: string;
        activity_type: string;
        tire_id: string | null;
        vehicle_id: string | null;
        position: string | null;
        mileage: number | null;
        cost: number | null;
        description: string | null;
        performed_by: string | null;
        measurement_value: number | null;
        new_tire_id: string | null;
        sale_price: number | null;
        buyer: string | null;
        notes: string | null;
        created_at: string;
        updated_at: string;
      };
      Insert: {
        id?: string;
        date?: string;
        activity_type: string;
        tire_id?: string | null;
        vehicle_id?: string | null;
        position?: string | null;
        mileage?: number | null;
        cost?: number | null;
        description?: string | null;
        performed_by?: string | null;
        measurement_value?: number | null;
        new_tire_id?: string | null;
        sale_price?: number | null;
        buyer?: string | null;
        notes?: string | null;
        created_at?: string;
        updated_at?: string;
      };
      Update: {
        id?: string;
        date?: string;
        activity_type?: string;
        tire_id?: string | null;
        vehicle_id?: string | null;
        position?: string | null;
        mileage?: number | null;
        cost?: number | null;
        description?: string | null;
        performed_by?: string | null;
        measurement_value?: number | null;
        new_tire_id?: string | null;
        sale_price?: number | null;
        buyer?: string | null;
        notes?: string | null;
        created_at?: string;
        updated_at?: string;
      };
      Relationships: [
        {
          foreignKeyName: "activity_logs_tire_id_fkey";
          columns: ["tire_id"];
          isOneToOne: false;
          referencedRelation: "tires";
          referencedColumns: ["id"];
        },
        {
          foreignKeyName: "activity_logs_vehicle_id_fkey";
          columns: ["vehicle_id"];
          isOneToOne: false;
          referencedRelation: "vehicles";
          referencedColumns: ["id"];
        },
        {
          foreignKeyName: "activity_logs_new_tire_id_fkey";
          columns: ["new_tire_id"];
          isOneToOne: false;
          referencedRelation: "tires";
          referencedColumns: ["id"];
        }
      ];
    };
  };
}

// Extend the Database type with custom tables
type ExtendedDatabase = Database & CustomSchema;

// Function to transform snake_case to camelCase
const toCamelCase = (obj: any): any => {
  if (obj === null || obj === undefined || typeof obj !== 'object') return obj;
  
  if (Array.isArray(obj)) {
    return obj.map(v => toCamelCase(v));
  }
  
  const camelCaseObj: any = {};
  
  Object.keys(obj).forEach(key => {
    const camelCaseKey = key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
    camelCaseObj[camelCaseKey] = toCamelCase(obj[key]);
  });
  
  return camelCaseObj;
};

// Function to transform camelCase to snake_case
const toSnakeCase = (obj: any): any => {
  if (obj === null || obj === undefined || typeof obj !== 'object') return obj;
  
  if (Array.isArray(obj)) {
    return obj.map(v => toSnakeCase(v));
  }
  
  const snakeCaseObj: any = {};
  
  Object.keys(obj).forEach(key => {
    const snakeCaseKey = key.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
    snakeCaseObj[snakeCaseKey] = toSnakeCase(obj[key]);
  });
  
  return snakeCaseObj;
};

// Create the Supabase client with auto transformations
const supabaseClient = createClient<ExtendedDatabase>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY, 
  {
    global: {
      headers: {
        'x-app-version': '1.0.0',
      },
    },
  }
);

// Enhance the client with auto transform capabilities
export const supabase = {
  ...supabaseClient,
  // Override from method to automatically transform responses
  from: (table: string) => {
    const original = supabaseClient.from(table);
    
    // Override the select method to transform responses
    const originalSelect = original.select;
    original.select = function(columns) {
      const query = originalSelect.call(this, columns);
      
      // Override the then method to transform data
      const originalThen = query.then;
      query.then = function(onFulfilled, onRejected) {
        return originalThen.call(
          this,
          (result) => {
            if (result.data) {
              result.data = toCamelCase(result.data);
            }
            return onFulfilled ? onFulfilled(result) : result;
          },
          onRejected
        );
      };
      
      return query;
    };
    
    // Override the insert method to transform data
    const originalInsert = original.insert;
    original.insert = function(values, options) {
      return originalInsert.call(this, toSnakeCase(values), options);
    };
    
    // Override the update method to transform data
    const originalUpdate = original.update;
    original.update = function(values, options) {
      return originalUpdate.call(this, toSnakeCase(values), options);
    };
    
    return original;
  },
};
