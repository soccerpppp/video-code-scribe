
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://xxcgpoksxyqbxheonash.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh4Y2dwb2tzeHlxYnhoZW9uYXNoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ3MTE3OTEsImV4cCI6MjA2MDI4Nzc5MX0.3GBhUMFkurFbVnXYXJO5mY9v1e0Cq-JnQvgjFSNsQSM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a custom type that includes tables not in the auto-generated types
type CustomSchema = {
  Tables: {
    activity_logs: {
      Row: {
        id: string;
        date: string;
        activity_type: string;
        tire_id: string | null;
        vehicle_id: string | null;
        position: string | null;
        mileage: number | null;
        cost: number | null;
        description: string | null;
        performed_by: string | null;
        measurement_value: number | null;
        new_tire_id: string | null;
        sale_price: number | null;
        buyer: string | null;
        notes: string | null;
        created_at: string;
        updated_at: string;
      };
      Insert: {
        id?: string;
        date?: string;
        activity_type: string;
        tire_id?: string | null;
        vehicle_id?: string | null;
        position?: string | null;
        mileage?: number | null;
        cost?: number | null;
        description?: string | null;
        performed_by?: string | null;
        measurement_value?: number | null;
        new_tire_id?: string | null;
        sale_price?: number | null;
        buyer?: string | null;
        notes?: string | null;
        created_at?: string;
        updated_at?: string;
      };
      Update: {
        id?: string;
        date?: string;
        activity_type?: string;
        tire_id?: string | null;
        vehicle_id?: string | null;
        position?: string | null;
        mileage?: number | null;
        cost?: number | null;
        description?: string | null;
        performed_by?: string | null;
        measurement_value?: number | null;
        new_tire_id?: string | null;
        sale_price?: number | null;
        buyer?: string | null;
        notes?: string | null;
        created_at?: string;
        updated_at?: string;
      };
      Relationships: [
        {
          foreignKeyName: "activity_logs_tire_id_fkey";
          columns: ["tire_id"];
          isOneToOne: false;
          referencedRelation: "tires";
          referencedColumns: ["id"];
        },
        {
          foreignKeyName: "activity_logs_vehicle_id_fkey";
          columns: ["vehicle_id"];
          isOneToOne: false;
          referencedRelation: "vehicles";
          referencedColumns: ["id"];
        },
        {
          foreignKeyName: "activity_logs_new_tire_id_fkey";
          columns: ["new_tire_id"];
          isOneToOne: false;
          referencedRelation: "tires";
          referencedColumns: ["id"];
        }
      ];
    };
  };
}

// Extend the Database type with custom tables
type ExtendedDatabase = Database & CustomSchema;

// Create the Supabase client with auto-conversion between camelCase and snake_case
export const supabase = createClient<ExtendedDatabase>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY, 
  {
    global: {
      headers: {
        'x-app-version': '1.0.0',
      },
    },
    db: {
      schema: 'public',
    },
  }
);

// Helper function to convert snake_case to camelCase
export function snakeToCamel<T>(obj: any): T {
  if (obj === null || obj === undefined || typeof obj !== 'object') {
    return obj;
  }

  if (Array.isArray(obj)) {
    return obj.map(o => snakeToCamel<any>(o)) as unknown as T;
  }

  return Object.keys(obj).reduce((acc, key) => {
    const camelKey = key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
    acc[camelKey] = snakeToCamel(obj[key]);
    return acc;
  }, {} as any) as T;
}

// Helper function to convert camelCase to snake_case
export function camelToSnake<T>(obj: any): T {
  if (obj === null || obj === undefined || typeof obj !== 'object') {
    return obj;
  }

  if (Array.isArray(obj)) {
    return obj.map(o => camelToSnake<any>(o)) as unknown as T;
  }

  return Object.keys(obj).reduce((acc, key) => {
    const snakeKey = key.replace(/([A-Z])/g, (_, letter) => `_${letter.toLowerCase()}`);
    acc[snakeKey] = camelToSnake(obj[key]);
    return acc;
  }, {} as any) as T;
}
